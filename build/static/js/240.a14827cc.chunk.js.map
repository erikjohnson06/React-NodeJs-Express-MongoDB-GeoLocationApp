{"version":3,"file":"static/js/240.a14827cc.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hooks.js","shared/util/validators.js","users/pages/Auth.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n\n    const imageSelectionRef = useRef();\n\n    useEffect(() => {\n\n        if (!file){\n            return;\n        }\n\n        const fileReader = new FileReader();\n\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n\n        fileReader.readAsDataURL(file);\n\n    }, [file]);\n\n    const selectedHandler = event => {\n\n        let img;\n        let imgIsValid = isValid;\n\n        if (event.target.files || event.target.files.length === 1){\n            img = event.target.files[0];\n            setFile(img);\n            setIsValid(true);\n            imgIsValid = true;\n        }\n        else {\n            setIsValid(false);\n            imgIsValid = false;\n        }\n\n        props.onInput(props.id, img, imgIsValid);\n    };\n\n    const selectImageHandler = () => {\n        imageSelectionRef.current.click();\n    };\n\n    return (\n            <div className=\"form-control\">\n                <input\n                    id={props.id}\n                    ref={imageSelectionRef}\n                    style={{display: 'none'}}\n                    type=\"file\"\n                    accept=\".jpg,.png,.jpeg\"\n                    onChange={selectedHandler}\n                />\n\n                <div className={`image-upload ${props.center && 'center'}`}>\n                    <div className=\"image-upload__preview\">\n                        {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    </div>\n                    <Button type=\"button\" onClick={selectImageHandler}>{props.buttonText}</Button>\n                </div>\n            </div>\n            );\n};\n\nexport default ImageUpload;","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                isTouched: true\n            };\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '',\n        isValid: props.initialValid ||false,\n        isTouched: false\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid); //maps to NewLocation.titleInputHandler\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({\n            type: 'CHANGE',\n            val: event.target.value,\n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = props.element === 'input' ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            );\n\n    return (\n            <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} >\n                <label htmlFor={props.id}>\n                    {props.label}\n                </label>\n                {element}\n                {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n            </div>\n            );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n    return (\n            <div className={`card ${props.className}`} style={props.style}>\n              {props.children}\n            </div>\n            );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {value: action.value, isValid: action.isValid}\n                },\n                isValid: formIsValid\n            };\n\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({type: VALIDATOR_TYPE_REQUIRE});\n\nexport const VALIDATOR_FILE = () => ({type: VALIDATOR_TYPE_FILE});\n\nexport const VALIDATOR_MINLENGTH = val => ({\n        type: VALIDATOR_TYPE_MINLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MAXLENGTH = val => ({\n        type: VALIDATOR_TYPE_MAXLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MIN = val => ({type: VALIDATOR_TYPE_MIN, val: val});\nexport const VALIDATOR_MAX = val => ({type: VALIDATOR_TYPE_MAX, val: val});\nexport const VALIDATOR_EMAIL = () => ({type: VALIDATOR_TYPE_EMAIL});\n\n/**\n * @param {mixed} value\n * @param {Array} validators\n * @returns Boolean\n */\nexport const validate = (value, validators) => {\n    let isValid = true;\n    for (const validator of validators) {\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n            isValid = isValid && value.trim().length > 0;\n        }\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n            isValid = isValid && value.trim().length >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n            isValid = isValid && value.trim().length <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MIN) {\n            isValid = isValid && +value >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAX) {\n            isValid = isValid && +value <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n        }\n    }\n    return isValid;\n};\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\n\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hooks';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, hasError, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm(\n            {\n                email: {\n                    value: '',\n                    isValid: false\n                },\n                password: {\n                    value: '',\n                    isValid: false\n                }\n            },\n            false\n            );\n\n\n    const switchModeHandler = event => {\n\n        //Adjust form validation when switching modes\n        if (!isLoginMode){\n            setFormData({\n                ...formState.inputs,\n                name: undefined,\n                image: undefined\n            },\n            (formState.inputs.email.isValid && formState.inputs.password.isValid));\n        }\n        else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                },\n                image : {\n                    value: null,\n                    isValid: false\n                }\n            },\n            false\n                    );\n        }\n\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmitHandler = async event => {\n        \n        event.preventDefault();\n\n        if (isLoginMode){\n\n            try {\n\n                const response = await sendRequest(\n                    process.env.REACT_APP_API_URL + '/users/login',\n                    'POST',\n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type': 'application/json'\n                    }\n                );\n\n                auth.login(response.userId, response.token);\n            }\n            catch(e){\n                console.error(e);\n            }\n        }\n        else {\n\n            try {\n\n                const formData = new FormData();\n                formData.append('name', formState.inputs.name.value);\n                formData.append('email', formState.inputs.email.value);\n                formData.append('password', formState.inputs.password.value);\n                formData.append('image', formState.inputs.image.value);\n\n                const response = await sendRequest(\n                    process.env.REACT_APP_API_URL + '/users/signup',\n                    'POST',\n                    formData\n                );\n\n                auth.login(response.userId, response.token);\n            }\n            catch(e){\n                console.error(e);\n            }\n        }\n    };\n\n    return (\n            <React.Fragment>\n                <ErrorModal error={hasError} onClear={clearError} />\n                <Card className=\"authentication\">\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <h2>Sign In</h2>\n                    <hr />\n                    <form onSubmit={authSubmitHandler}>\n\n                        {!isLoginMode && (\n                                <Input\n                            element=\"input\"\n                            id=\"name\"\n                            type=\"text\"\n                            label=\"Name\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            errorText=\"Please enter a valid name\"\n                            onInput={inputHandler}\n                            />\n                        )}\n\n                        <Input\n                            element=\"input\"\n                            id=\"email\"\n                            type=\"email\"\n                            label=\"Email Address\"\n                            validators={[VALIDATOR_EMAIL()]}\n                            errorText=\"Please enter a valid email address\"\n                            onInput={inputHandler}\n                            />\n                        <Input\n                            element=\"input\"\n                            id=\"password\"\n                            type=\"password\"\n                            label=\"Password\"\n                            validators={[VALIDATOR_MINLENGTH(6)]}\n                            errorText=\"Please enter a valid password. Minimum of 6 characters.\"\n                            onInput={inputHandler}\n                            />\n\n                        {!isLoginMode &&\n                                <ImageUpload\n                                    id=\"image\"\n                                    center\n                                    onInput={inputHandler}\n                                    errorText=\"Please provide an image\"\n                                    buttonText=\"Upload Profile Image\"\n                        />\n                        }\n\n                        <Button type=\"submit\" disabled={!formState.isValid}>\n                        {isLoginMode ? \"Login\" : \"Sign Up\"}\n                        </Button>\n                    </form>\n                    <Button inverse onClick={switchModeHandler}>\n                        Switch To {isLoginMode ? \"Sign Up\" : \"Login\"}\n                    </Button>\n                </Card>\n            </React.Fragment>\n            );\n};\n\nexport default Auth;"],"names":["props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","imageSelectionRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","img","imgIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","buttonText","inputReducer","state","action","_objectSpread","value","val","validate","validators","isTouched","_useReducer","useReducer","initialValue","initialValid","_useReducer2","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","_defineProperty","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","test","err","e","f","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","hasError","sendRequest","clearError","_useForm","email","password","_useForm2","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","formData","_response","wrap","_context","prev","next","preventDefault","process","JSON","stringify","sent","login","userId","token","t0","console","error","FormData","append","name","image","t1","stop","_x","apply","arguments","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode"],"sourceRoot":""}