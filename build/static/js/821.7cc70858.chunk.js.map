{"version":3,"file":"static/js/821.7cc70858.chunk.js","mappings":"iTA+JA,UA1IuB,WAEnB,IAAMA,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACxBC,GAAyDC,EAAAA,EAAAA,KAAjDC,EAASF,EAATE,UAAWC,EAAQH,EAARG,SAAUC,EAAWJ,EAAXI,YAAaC,EAAUL,EAAVK,WAC1CC,GAA4CC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAElCI,GAAaC,EAAAA,EAAAA,MAAYC,MAEzBC,GAAWC,EAAAA,EAAAA,MAEjBC,GAA+CC,EAAAA,EAAAA,GAAQ,CACnDC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,YAAa,CACTF,MAAO,GACPC,SAAS,GAEbE,QAAS,CACLH,MAAO,GACPC,SAAS,KAEd,GAAKG,GAAAf,EAAAA,EAAAA,GAAAQ,EAAA,GAbDQ,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAAEG,EAAWH,EAAA,IAe3CI,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGSnC,EAAY,GAADoC,OACvBC,4BAA6B,eAAAD,OAAc5B,IAChD,KAAD,EAFCuB,EAAQE,EAAAK,KAId/B,EAAkBwB,EAASQ,UAE3BhB,EAAY,CACRR,MAAO,CACHC,MAAOe,EAASQ,SAASxB,MACzBE,SAAS,GAEbC,YAAa,CACTF,MAAOe,EAASQ,SAASrB,YACzBD,SAAS,GAEbE,QAAS,CACLH,MAAOe,EAASQ,SAASpB,QACzBF,SAAS,KAEd,GAAMgB,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAGTQ,QAAQC,IAAGT,EAAAO,IAAI,yBAAAP,EAAAU,OAAA,GAAAb,EAAA,kBAEtB,kBA3BkB,OAAAJ,EAAAkB,MAAA,KAAAC,UAAA,KA6BnBpB,GAEJ,GAAG,CAACzB,EAAaQ,EAAYe,IAE7B,IAAMuB,EAA2B,eAAAC,GAAApB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAmB,EAAMC,GAAK,OAAArB,EAAAA,EAAAA,KAAAI,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAEpB,OAAvBc,EAAME,iBAAiBD,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAIbnC,EAAY,GAADoC,OACNC,4BAA6B,eAAAD,OAAc5B,GAC9C,QACA4C,KAAKC,UAAU,CACXtC,MAAOM,EAAUiC,OAAOvC,MAAMC,MAC9BE,YAAaG,EAAUiC,OAAOpC,YAAYF,MAC1CG,QAASE,EAAUiC,OAAOnC,QAAQH,MAClCuC,UAAW9D,EAAK+D,SAEpB,CACI,eAAgB,mBAChB,cAAkB,UAAY/D,EAAKgE,QAEzC,KAAD,EAGL9C,EAAS,IAAMlB,EAAK+D,OAAS,cAAcN,EAAAf,KAAA,gBAAAe,EAAAhB,KAAA,EAAAgB,EAAAV,GAAAU,EAAA,SAE3CT,QAAQC,IAAGQ,EAAAV,IAAI,yBAAAU,EAAAP,OAAA,GAAAK,EAAA,kBAGtB,gBA3BgCU,GAAA,OAAAX,EAAAH,MAAA,KAAAC,UAAA,KA6BjC,OAAI/C,GACO6D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UAACF,EAAAA,EAAAA,KAACG,EAAAA,EAAc,MAExCxD,GAAmBP,GAKrBgE,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAH,SAAA,EACXF,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,MAAOnE,EAAUoE,QAASlE,KACpCH,GAAaQ,IACfyD,EAAAA,EAAAA,MAAA,QAAMH,UAAU,gBAAgBQ,SAAUtB,EAA4Be,SAAA,EAClEF,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACFC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,6BACVC,QAASvD,EACTwD,aAAcxE,EAAeS,MAC7BgE,cAAc,KAElBpB,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACFC,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,EAACM,EAAAA,EAAAA,IAAoB,IACjCJ,UAAU,6DACVC,QAASvD,EACTwD,aAAcxE,EAAeY,YAC7B6D,cAAc,KAElBpB,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACFC,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,+BACVC,QAASvD,EACTwD,aAAcxE,EAAea,QAC7B4D,cAAc,KAElBpB,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACT,KAAK,SAASU,UAAW7D,EAAUJ,QAAQ4C,SAAC,2BAvCzDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UAACF,EAAAA,EAAAA,KAACwB,EAAAA,EAAI,CAAAtB,UAACF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oCA2CjD,C,4GCxJMuB,EAAe,SAACC,EAAOC,GAEzB,OAAQA,EAAOd,MACX,IAAK,SACD,OAAAe,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRrE,MAAOsE,EAAOE,IACdvE,SAASwE,EAAAA,EAAAA,IAASH,EAAOE,IAAKF,EAAOZ,cAE7C,IAAK,QACD,OAAAa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRK,WAAW,IAEnB,QACI,OAAOL,EAEnB,EA6DA,EA3Dc,SAAAM,GAEV,IAAAC,GAA+BC,EAAAA,EAAAA,YAAWT,EAAc,CACpDpE,MAAO2E,EAAMb,cAAgB,GAC7B7D,QAAS0E,EAAMZ,eAAe,EAC9BW,WAAW,IACbI,GAAAzF,EAAAA,EAAAA,GAAAuF,EAAA,GAJKG,EAAUD,EAAA,GAAEE,EAAQF,EAAA,GAMnBxB,EAAgBqB,EAAhBrB,GAAIO,EAAYc,EAAZd,QACJ7D,EAAmB+E,EAAnB/E,MAAOC,EAAY8E,EAAZ9E,SAEfO,EAAAA,EAAAA,YAAU,WACNqD,EAAQP,EAAItD,EAAOC,EACvB,GAAG,CAACqD,EAAItD,EAAOC,EAAS4D,IAExB,IAAMoB,EAAgB,SAAAhD,GAClB+C,EAAS,CACLxB,KAAM,SACNgB,IAAKvC,EAAMiD,OAAOlF,MAClB0D,WAAYiB,EAAMjB,YAE1B,EAEMyB,EAAe,WACjBH,EAAS,CACLxB,KAAM,SAEd,EAEMD,EAA4B,UAAlBoB,EAAMpB,SACdZ,EAAAA,EAAAA,KAAA,SACIW,GAAIqB,EAAMrB,GACVE,KAAMmB,EAAMnB,KACZ4B,YAAaT,EAAMS,YACnBC,SAAUJ,EACVK,OAAQH,EACRnF,MAAO+E,EAAW/E,SAGtB2C,EAAAA,EAAAA,KAAA,YACIW,GAAIqB,EAAMrB,GACViC,KAAMZ,EAAMY,MAAQ,EACpBF,SAAUJ,EACVK,OAAQH,EACRnF,MAAO+E,EAAW/E,QAI9B,OACQ+C,EAAAA,EAAAA,MAAA,OAAKH,UAAS,gBAAAxB,QAAmB2D,EAAW9E,SAAW8E,EAAWL,WAAa,yBAA0B7B,SAAA,EACrGF,EAAAA,EAAAA,KAAA,SAAO6C,QAASb,EAAMrB,GAAGT,SACpB8B,EAAMlB,QAEVF,GACCwB,EAAW9E,SAAW8E,EAAWL,YAAa/B,EAAAA,EAAAA,KAAA,KAAAE,SAAI8B,EAAMf,cAG1E,C,4ECrEA,EARa,SAAAe,GACT,OACQhC,EAAAA,EAAAA,KAAA,OAAKC,UAAS,QAAAxB,OAAUuD,EAAM/B,WAAa6C,MAAOd,EAAMc,MAAM5C,SAC3D8B,EAAM9B,UAGrB,C,mGCRM6C,EAAc,SAACrB,EAAOC,GACxB,OAAQA,EAAOd,MACX,IAAK,eAED,IAAImC,GAAc,EAClB,IAAK,IAAMC,KAAWvB,EAAM/B,OAEnB+B,EAAM/B,OAAOsD,KAKdD,EADAC,IAAYtB,EAAOsB,QACLD,GAAerB,EAAOrE,QAEtB0F,GAAetB,EAAM/B,OAAOsD,GAAS3F,SAI3D,OAAAsE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACR/B,QAAMiC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACCF,EAAM/B,QAAM,IAAAuD,EAAAA,EAAAA,GAAA,GACdvB,EAAOsB,QAAU,CAAC5F,MAAOsE,EAAOtE,MAAOC,QAASqE,EAAOrE,WAE5DA,QAAS0F,IAGjB,IAAK,WACD,MAAO,CACHrD,OAAQgC,EAAOhC,OACfrC,QAASqE,EAAOqB,aAExB,QACI,OAAOtB,EAEnB,EAEavE,EAAU,SAACgG,EAAeC,GAEnC,IAAAnB,GAA8BC,EAAAA,EAAAA,YAAWa,EAAa,CAClDpD,OAAQwD,EACR7F,QAAS8F,IACXjB,GAAAzF,EAAAA,EAAAA,GAAAuF,EAAA,GAHKvE,EAASyE,EAAA,GAAEE,EAAQF,EAAA,GAsB1B,MAAO,CAACzE,GAjBa2F,EAAAA,EAAAA,cAAY,SAAC1C,EAAItD,EAAOC,GACzC+E,EAAS,CACLxB,KAAM,eACNxD,MAAOA,EACPC,QAASA,EACT2F,QAAStC,GAEjB,GAAG,KAEiB0C,EAAAA,EAAAA,cAAY,SAACC,EAAWC,GACxClB,EAAS,CACLxB,KAAM,WACNlB,OAAQ2D,EACRN,YAAaO,GAErB,GAAG,IAGP,C,8IChEMC,EAAyB,UACzBC,EAA2B,YAC3BC,EAA2B,YAG3BC,EAAuB,QAGhB3C,EAAoB,WAAH,MAAU,CAACH,KAAM2C,EAAuB,EAIzDnC,EAAsB,SAAAQ,GAAG,MAAK,CACnChB,KAAM4C,EACN5B,IAAKA,EACR,EASQ+B,EAAkB,WAAH,MAAU,CAAC/C,KAAM8C,EAAqB,EAOrD7B,EAAW,SAACzE,EAAO0D,GAC5B,IACkC8C,EAD9BvG,GAAU,EAAKwG,GAAAC,EAAAA,EAAAA,GACKhD,GAAU,IAAlC,IAAA+C,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAoC,CAAC,IAA1BC,EAASN,EAAAxG,MACZ8G,EAAUtD,OAAS2C,IACnBlG,EAAUA,GAAWD,EAAM+G,OAAOC,OAAS,GAE3CF,EAAUtD,OAAS4C,IACnBnG,EAAUA,GAAWD,EAAM+G,OAAOC,QAAUF,EAAUtC,KAEtDsC,EAAUtD,OAAS6C,IACnBpG,EAAUA,GAAWD,EAAM+G,OAAOC,QAAUF,EAAUtC,KAtCvC,QAwCfsC,EAAUtD,OACVvD,EAAUA,IAAYD,GAAS8G,EAAUtC,KAxC1B,QA0CfsC,EAAUtD,OACVvD,EAAUA,IAAYD,GAAS8G,EAAUtC,KAEzCsC,EAAUtD,OAAS8C,IACnBrG,EAAUA,GAAW,iBAAiBgH,KAAKjH,GAEnD,CAAC,OAAAkH,GAAAT,EAAAU,EAAAD,EAAA,SAAAT,EAAAW,GAAA,CACD,OAAOnH,CACX,C","sources":["locations/pages/UpdateLocation.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hooks.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\n\nimport { useForm } from '../../shared/hooks/form-hooks';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './LocationForm.css';\n\nconst UpdateLocation = () => {\n\n    const auth = useContext(AuthContext);\n    const { isLoading, hasError, sendRequest, clearError } = useHttpClient();\n    const [loadedLocation, setLoadedLocation] = useState();\n\n    const locationId = useParams().locId;\n\n    const navigate = useNavigate();\n\n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: true\n        },\n        description: {\n            value: '',\n            isValid: true\n        },\n        address: {\n            value: '',\n            isValid: true\n            }\n    }, true);\n\n    useEffect(() => {\n\n        const fetchLocation = async () => {\n\n            try {\n                const response = await sendRequest(\n                        `${process.env.REACT_APP_API_URL}/locations/${locationId}`\n                    );\n\n                setLoadedLocation(response.location);\n\n                setFormData({\n                    title: {\n                        value: response.location.title,\n                        isValid: true\n                    },\n                    description: {\n                        value: response.location.description,\n                        isValid: true\n                    },\n                    address: {\n                        value: response.location.address,\n                        isValid: true\n                        }\n                }, true);\n            }\n            catch (e){\n                console.log(e);\n            }\n        };\n\n        fetchLocation();\n\n    }, [sendRequest, locationId, setFormData]);\n\n    const locationUpdateSubmitHandler = async event => {\n\n        event.preventDefault();\n\n        try {\n\n            await sendRequest(\n                    `${process.env.REACT_APP_API_URL}/locations/${locationId}`,\n                    'PATCH',\n                    JSON.stringify({\n                        title: formState.inputs.title.value,\n                        description: formState.inputs.description.value,\n                        address: formState.inputs.address.value,\n                        updatedBy: auth.userId\n                    }),\n                    {\n                        'Content-Type': 'application/json',\n                        'Authorization' : 'Bearer ' + auth.token\n                    }\n                );\n\n            //Redirect to user locations\n            navigate('/' + auth.userId + '/locations');\n        } catch (e) {\n            console.log(e);\n        }\n\n    };\n\n    if (isLoading){\n        return <div className=\"center\"><LoadingSpinner /></div>;\n    }\n    else if (!loadedLocation && !hasError) {\n        return <div className=\"center\"><Card><h2>Unable to find this location</h2></Card></div>;\n    }\n\n    return (\n            <React.Fragment>\n                <ErrorModal error={hasError} onClear={clearError} />\n                {!isLoading && loadedLocation && (\n                <form className=\"location-form\" onSubmit={locationUpdateSubmitHandler}>\n                    <Input\n                        id=\"title\"\n                        element=\"input\"\n                        type=\"text\"\n                        label=\"Title\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid title\"\n                        onInput={inputHandler}\n                        initialValue={loadedLocation.title}\n                        initialValid={true}\n                        />\n                    <Input\n                        id=\"description\"\n                        element=\"textarea\"\n                        label=\"Description\"\n                        validators={[VALIDATOR_MINLENGTH(5)]}\n                        errorText=\"Please enter a valid description (minimum of 5 characters)\"\n                        onInput={inputHandler}\n                        initialValue={loadedLocation.description}\n                        initialValid={true}\n                        />\n                    <Input\n                        id=\"address\"\n                        element=\"input\"\n                        label=\"Address\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid address\"\n                        onInput={inputHandler}\n                        initialValue={loadedLocation.address}\n                        initialValid={true}\n                        />\n                    <Button type=\"submit\" disabled={!formState.isValid}>Update Location</Button>\n                </form>)}\n            </React.Fragment>\n        );\n};\n\nexport default UpdateLocation;","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                isTouched: true\n            };\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '',\n        isValid: props.initialValid ||false,\n        isTouched: false\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid); //maps to NewLocation.titleInputHandler\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({\n            type: 'CHANGE',\n            val: event.target.value,\n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = props.element === 'input' ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            );\n\n    return (\n            <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} >\n                <label htmlFor={props.id}>\n                    {props.label}\n                </label>\n                {element}\n                {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n            </div>\n            );\n};\n\nexport default Input;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n    return (\n            <div className={`card ${props.className}`} style={props.style}>\n              {props.children}\n            </div>\n            );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {value: action.value, isValid: action.isValid}\n                },\n                isValid: formIsValid\n            };\n\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({type: VALIDATOR_TYPE_REQUIRE});\n\nexport const VALIDATOR_FILE = () => ({type: VALIDATOR_TYPE_FILE});\n\nexport const VALIDATOR_MINLENGTH = val => ({\n        type: VALIDATOR_TYPE_MINLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MAXLENGTH = val => ({\n        type: VALIDATOR_TYPE_MAXLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MIN = val => ({type: VALIDATOR_TYPE_MIN, val: val});\nexport const VALIDATOR_MAX = val => ({type: VALIDATOR_TYPE_MAX, val: val});\nexport const VALIDATOR_EMAIL = () => ({type: VALIDATOR_TYPE_EMAIL});\n\n/**\n * @param {mixed} value\n * @param {Array} validators\n * @returns Boolean\n */\nexport const validate = (value, validators) => {\n    let isValid = true;\n    for (const validator of validators) {\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n            isValid = isValid && value.trim().length > 0;\n        }\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n            isValid = isValid && value.trim().length >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n            isValid = isValid && value.trim().length <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MIN) {\n            isValid = isValid && +value >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAX) {\n            isValid = isValid && +value <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n        }\n    }\n    return isValid;\n};\n"],"names":["auth","useContext","AuthContext","_useHttpClient","useHttpClient","isLoading","hasError","sendRequest","clearError","_useState","useState","_useState2","_slicedToArray","loadedLocation","setLoadedLocation","locationId","useParams","locId","navigate","useNavigate","_useForm","useForm","title","value","isValid","description","address","_useForm2","formState","inputHandler","setFormData","useEffect","fetchLocation","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","concat","process","sent","location","t0","console","log","stop","apply","arguments","locationUpdateSubmitHandler","_ref2","_callee2","event","_context2","preventDefault","JSON","stringify","inputs","updatedBy","userId","token","_x","_jsx","className","children","LoadingSpinner","_jsxs","React","ErrorModal","error","onClear","onSubmit","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","Button","disabled","Card","inputReducer","state","action","_objectSpread","val","validate","isTouched","props","_useReducer","useReducer","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","style","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","e","f"],"sourceRoot":""}