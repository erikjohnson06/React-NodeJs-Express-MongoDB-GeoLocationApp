{"version":3,"file":"static/js/516.63c445d4.chunk.js","mappings":"iTAkHA,UAjGoB,SAAAA,GAEhB,IAAMC,GAAOC,EAAAA,EAAAA,YAAWC,EAAAA,GACxBC,GAAyDC,EAAAA,EAAAA,KAAjDC,EAASF,EAATE,UAAWC,EAAQH,EAARG,SAAUC,EAAWJ,EAAXI,YAAaC,EAAUL,EAAVK,WAE1CC,GAAkCC,EAAAA,EAAAA,GAClC,CACIC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,YAAa,CACTF,MAAO,GACPC,SAAS,GAEbE,QAAS,CACLH,MAAO,GACPC,SAAS,GAEbG,MAAO,CACHJ,MAAO,KACPC,SAAS,KAEd,GAAMI,GAAAC,EAAAA,EAAAA,GAAAT,EAAA,GAlBFU,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAoBxBI,GAAWC,EAAAA,EAAAA,MAEXC,EAAqB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAMC,GAAK,IAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAUsB,OAR3DL,EAAMM,iBAAiBH,EAAAC,KAAA,GAIbH,EAAW,IAAIM,UACZC,OAAO,QAASlB,EAAUmB,OAAO3B,MAAMC,OAChDkB,EAASO,OAAO,cAAelB,EAAUmB,OAAOxB,YAAYF,OAC5DkB,EAASO,OAAO,UAAWlB,EAAUmB,OAAOvB,QAAQH,OACpDkB,EAASO,OAAO,QAASlB,EAAUmB,OAAOtB,MAAMJ,OAAOoB,EAAAE,KAAA,EAEjD3B,EACEgC,sCACA,OACAT,EACA,CAAE,cAAkB,UAAY9B,EAAKwC,QACvC,KAAD,EAGLnB,EAAS,KAAKW,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAEdU,QAAQC,IAAGX,EAAAS,IAAI,yBAAAT,EAAAY,OAAA,GAAAhB,EAAA,mBAEtB,gBAxB0BiB,GAAA,OAAArB,EAAAsB,MAAA,KAAAC,UAAA,KA0B3B,OACQC,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAC,SAAA,EACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,MAAO/C,EAAUgD,QAAS9C,KACtCwC,EAAAA,EAAAA,MAAA,QAAMO,UAAU,gBAAgBC,SAAUjC,EAAsB2B,SAAA,CAC3D7C,IAAa8C,EAAAA,EAAAA,KAACM,EAAAA,EAAc,CAACC,WAAS,KACvCP,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACFC,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,6BACVC,QAAS/C,KAEb+B,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACFC,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,EAACI,EAAAA,EAAAA,IAAoB,IACjCF,UAAU,6DACVC,QAAS/C,KAGb+B,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACFC,GAAG,UACHC,QAAQ,QACRE,MAAM,UACNC,WAAY,EAACC,EAAAA,EAAAA,OACbC,UAAU,+BACVC,QAAS/C,KAEb+B,EAAAA,EAAAA,KAACkB,EAAAA,EAAW,CACRT,GAAG,QACHU,QAAM,EACNH,QAAS/C,EACT8C,UAAU,0BACVK,WAAW,kBAEfpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAACV,KAAK,SAASW,UAAWtD,EAAUN,QAAQqC,SAAC,sBAIxE,C,kGCvCA,EApEoB,SAAAnD,GAEhB,IAAA2E,GAAwBC,EAAAA,EAAAA,YAAUC,GAAA1D,EAAAA,EAAAA,GAAAwD,EAAA,GAA3BG,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAoCJ,EAAAA,EAAAA,YAAUK,GAAA9D,EAAAA,EAAAA,GAAA6D,EAAA,GAAvCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA8BR,EAAAA,EAAAA,WAAS,GAAMS,GAAAlE,EAAAA,EAAAA,GAAAiE,EAAA,GAAtCtE,EAAOuE,EAAA,GAAEC,EAAUD,EAAA,GAEpBE,GAAoBC,EAAAA,EAAAA,WAE1BC,EAAAA,EAAAA,YAAU,WAEN,GAAKX,EAAL,CAIA,IAAMY,EAAa,IAAIC,WAEvBD,EAAWE,OAAS,WAChBT,EAAcO,EAAWG,OAC7B,EAEAH,EAAWI,cAAchB,EARzB,CAUJ,GAAG,CAACA,IAyBJ,OACQ7B,EAAAA,EAAAA,MAAA,OAAKO,UAAU,eAAcL,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SACIS,GAAI7D,EAAM6D,GACVkC,IAAKR,EACLS,MAAO,CAACC,QAAS,QACjBlC,KAAK,OACLmC,OAAO,kBACPC,SA/BQ,SAAArE,GAEpB,IAAIsE,EACAC,EAAavF,EAEbgB,EAAMwE,OAAOC,OAAuC,IAA9BzE,EAAMwE,OAAOC,MAAMC,QACzCJ,EAAMtE,EAAMwE,OAAOC,MAAM,GACzBxB,EAAQqB,GACRd,GAAW,GACXe,GAAa,IAGbf,GAAW,GACXe,GAAa,GAGjBrG,EAAMoE,QAAQpE,EAAM6D,GAAIuC,EAAKC,EACjC,KAiBYpD,EAAAA,EAAAA,MAAA,OAAKO,UAAS,gBAAAiD,OAAkBzG,EAAMuE,QAAU,UAAWpB,SAAA,EACvDC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,wBAAuBL,SACjC+B,IAAc9B,EAAAA,EAAAA,KAAA,OAAKsD,IAAKxB,EAAYyB,IAAI,eAE7CvD,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CAACV,KAAK,SAAS6C,QAnBX,WACvBrB,EAAkBsB,QAAQC,OAC9B,EAiBkE3D,SAAEnD,EAAMwE,kBAI9E,C,4GClEMuC,EAAe,SAACC,EAAOC,GAEzB,OAAQA,EAAOlD,MACX,IAAK,SACD,OAAAmD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRnG,MAAOoG,EAAOE,IACdrG,SAASsG,EAAAA,EAAAA,IAASH,EAAOE,IAAKF,EAAOhD,cAE7C,IAAK,QACD,OAAAiD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRK,WAAW,IAEnB,QACI,OAAOL,EAEnB,EA6DA,EA3Dc,SAAAhH,GAEV,IAAAsH,GAA+BC,EAAAA,EAAAA,YAAWR,EAAc,CACpDlG,MAAOb,EAAMwH,cAAgB,GAC7B1G,QAASd,EAAMyH,eAAe,EAC9BJ,WAAW,IACbK,GAAAvG,EAAAA,EAAAA,GAAAmG,EAAA,GAJKK,EAAUD,EAAA,GAAEE,EAAQF,EAAA,GAMnB7D,EAAgB7D,EAAhB6D,GAAIO,EAAYpE,EAAZoE,QACJvD,EAAmB8G,EAAnB9G,MAAOC,EAAY6G,EAAZ7G,SAEf2E,EAAAA,EAAAA,YAAU,WACNrB,EAAQP,EAAIhD,EAAOC,EACvB,GAAG,CAAC+C,EAAIhD,EAAOC,EAASsD,IAExB,IAAMyD,EAAgB,SAAA/F,GAClB8F,EAAS,CACL7D,KAAM,SACNoD,IAAKrF,EAAMwE,OAAOzF,MAClBoD,WAAYjE,EAAMiE,YAE1B,EAEM6D,EAAe,WACjBF,EAAS,CACL7D,KAAM,SAEd,EAEMD,EAA4B,UAAlB9D,EAAM8D,SACdV,EAAAA,EAAAA,KAAA,SACIS,GAAI7D,EAAM6D,GACVE,KAAM/D,EAAM+D,KACZgE,YAAa/H,EAAM+H,YACnB5B,SAAU0B,EACVG,OAAQF,EACRjH,MAAO8G,EAAW9G,SAGtBuC,EAAAA,EAAAA,KAAA,YACIS,GAAI7D,EAAM6D,GACVoE,KAAMjI,EAAMiI,MAAQ,EACpB9B,SAAU0B,EACVG,OAAQF,EACRjH,MAAO8G,EAAW9G,QAI9B,OACQoC,EAAAA,EAAAA,MAAA,OAAKO,UAAS,gBAAAiD,QAAmBkB,EAAW7G,SAAW6G,EAAWN,WAAa,yBAA0BlE,SAAA,EACrGC,EAAAA,EAAAA,KAAA,SAAO8E,QAASlI,EAAM6D,GAAGV,SACpBnD,EAAMgE,QAEVF,GACC6D,EAAW7G,SAAW6G,EAAWN,YAAajE,EAAAA,EAAAA,KAAA,KAAAD,SAAInD,EAAMmE,cAG1E,C,mGC/EMgE,EAAc,SAACnB,EAAOC,GACxB,OAAQA,EAAOlD,MACX,IAAK,eAED,IAAIqE,GAAc,EAClB,IAAK,IAAMC,KAAWrB,EAAMzE,OAEnByE,EAAMzE,OAAO8F,KAKdD,EADAC,IAAYpB,EAAOoB,QACLD,GAAenB,EAAOnG,QAEtBsH,GAAepB,EAAMzE,OAAO8F,GAASvH,SAI3D,OAAAoG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACOF,GAAK,IACRzE,QAAM2E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACCF,EAAMzE,QAAM,IAAA+F,EAAAA,EAAAA,GAAA,GACdrB,EAAOoB,QAAU,CAACxH,MAAOoG,EAAOpG,MAAOC,QAASmG,EAAOnG,WAE5DA,QAASsH,IAGjB,IAAK,WACD,MAAO,CACH7F,OAAQ0E,EAAO1E,OACfzB,QAASmG,EAAOmB,aAExB,QACI,OAAOpB,EAEnB,EAEarG,EAAU,SAAC4H,EAAeC,GAEnC,IAAAlB,GAA8BC,EAAAA,EAAAA,YAAWY,EAAa,CAClD5F,OAAQgG,EACRzH,QAAS0H,IACXd,GAAAvG,EAAAA,EAAAA,GAAAmG,EAAA,GAHKlG,EAASsG,EAAA,GAAEE,EAAQF,EAAA,GAsB1B,MAAO,CAACtG,GAjBaqH,EAAAA,EAAAA,cAAY,SAAC5E,EAAIhD,EAAOC,GACzC8G,EAAS,CACL7D,KAAM,eACNlD,MAAOA,EACPC,QAASA,EACTuH,QAASxE,GAEjB,GAAG,KAEiB4E,EAAAA,EAAAA,cAAY,SAACC,EAAWC,GACxCf,EAAS,CACL7D,KAAM,WACNxB,OAAQmG,EACRN,YAAaO,GAErB,GAAG,IAGP,C,8IChEMC,EAAyB,UACzBC,EAA2B,YAC3BC,EAA2B,YAG3BC,EAAuB,QAGhB7E,EAAoB,WAAH,MAAU,CAACH,KAAM6E,EAAuB,EAIzDvE,EAAsB,SAAA8C,GAAG,MAAK,CACnCpD,KAAM8E,EACN1B,IAAKA,EACR,EASQ6B,EAAkB,WAAH,MAAU,CAACjF,KAAMgF,EAAqB,EAOrD3B,EAAW,SAACvG,EAAOoD,GAC5B,IACkCgF,EAD9BnI,GAAU,EAAKoI,GAAAC,EAAAA,EAAAA,GACKlF,GAAU,IAAlC,IAAAiF,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAoC,CAAC,IAA1BC,EAASN,EAAApI,MACZ0I,EAAUxF,OAAS6E,IACnB9H,EAAUA,GAAWD,EAAM2I,OAAOhD,OAAS,GAE3C+C,EAAUxF,OAAS8E,IACnB/H,EAAUA,GAAWD,EAAM2I,OAAOhD,QAAU+C,EAAUpC,KAEtDoC,EAAUxF,OAAS+E,IACnBhI,EAAUA,GAAWD,EAAM2I,OAAOhD,QAAU+C,EAAUpC,KAtCvC,QAwCfoC,EAAUxF,OACVjD,EAAUA,IAAYD,GAAS0I,EAAUpC,KAxC1B,QA0CfoC,EAAUxF,OACVjD,EAAUA,IAAYD,GAAS0I,EAAUpC,KAEzCoC,EAAUxF,OAASgF,IACnBjI,EAAUA,GAAW,iBAAiB2I,KAAK5I,GAEnD,CAAC,OAAA6I,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CACD,OAAO9I,CACX,C","sources":["locations/pages/NewLocation.js","shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/hooks/form-hooks.js","shared/util/validators.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport Input from '../../shared/components/FormElements/Input';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n    } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hooks';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './LocationForm.css';\n\nconst NewLocation = props => {\n\n    const auth = useContext(AuthContext);\n    const { isLoading, hasError, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler] = useForm(\n    {\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        },\n        address: {\n            value: '',\n            isValid: false\n        },\n        image: {\n            value: null,\n            isValid: false\n        }\n    }, false);\n\n    const navigate = useNavigate();\n\n    const locationSubmitHandler = async event => {\n        \n        event.preventDefault();\n\n        try {\n\n            const formData = new FormData();\n            formData.append('title', formState.inputs.title.value);\n            formData.append('description', formState.inputs.description.value);\n            formData.append('address', formState.inputs.address.value);\n            formData.append('image', formState.inputs.image.value);\n\n            await sendRequest(\n                    process.env.REACT_APP_API_URL + '/locations',\n                    'POST',\n                    formData,\n                    { 'Authorization' : 'Bearer ' + auth.token }\n                );\n\n            //Redirect to home\n            navigate('/');\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n            <React.Fragment>\n                <ErrorModal error={hasError} onClear={clearError} />\n                <form className=\"location-form\" onSubmit={locationSubmitHandler}>\n                    {isLoading && <LoadingSpinner asOverlay />}\n                    <Input\n                        id=\"title\"\n                        element=\"input\"\n                        type=\"text\"\n                        label=\"Title\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid title\"\n                        onInput={inputHandler}\n                        />\n                    <Input\n                        id=\"description\"\n                        element=\"textarea\"\n                        label=\"Description\"\n                        validators={[VALIDATOR_MINLENGTH(5)]}\n                        errorText=\"Please enter a valid description (minimum of 5 characters)\"\n                        onInput={inputHandler}\n                        />\n\n                    <Input\n                        id=\"address\"\n                        element=\"input\"\n                        label=\"Address\"\n                        validators={[VALIDATOR_REQUIRE()]}\n                        errorText=\"Please enter a valid address\"\n                        onInput={inputHandler}\n                        />\n                    <ImageUpload\n                        id=\"image\"\n                        center\n                        onInput={inputHandler}\n                        errorText=\"Please provide an image\"\n                        buttonText=\"Upload Image\"\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>Add Location</Button>\n                </form>\n            </React.Fragment>\n            );\n};\n\nexport default NewLocation;","import React, { useEffect, useRef, useState } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n\n    const imageSelectionRef = useRef();\n\n    useEffect(() => {\n\n        if (!file){\n            return;\n        }\n\n        const fileReader = new FileReader();\n\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        };\n\n        fileReader.readAsDataURL(file);\n\n    }, [file]);\n\n    const selectedHandler = event => {\n\n        let img;\n        let imgIsValid = isValid;\n\n        if (event.target.files || event.target.files.length === 1){\n            img = event.target.files[0];\n            setFile(img);\n            setIsValid(true);\n            imgIsValid = true;\n        }\n        else {\n            setIsValid(false);\n            imgIsValid = false;\n        }\n\n        props.onInput(props.id, img, imgIsValid);\n    };\n\n    const selectImageHandler = () => {\n        imageSelectionRef.current.click();\n    };\n\n    return (\n            <div className=\"form-control\">\n                <input\n                    id={props.id}\n                    ref={imageSelectionRef}\n                    style={{display: 'none'}}\n                    type=\"file\"\n                    accept=\".jpg,.png,.jpeg\"\n                    onChange={selectedHandler}\n                />\n\n                <div className={`image-upload ${props.center && 'center'}`}>\n                    <div className=\"image-upload__preview\">\n                        {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\n                    </div>\n                    <Button type=\"button\" onClick={selectImageHandler}>{props.buttonText}</Button>\n                </div>\n            </div>\n            );\n};\n\nexport default ImageUpload;","import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                isTouched: true\n            };\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '',\n        isValid: props.initialValid ||false,\n        isTouched: false\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid); //maps to NewLocation.titleInputHandler\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({\n            type: 'CHANGE',\n            val: event.target.value,\n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = props.element === 'input' ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n                />\n            );\n\n    return (\n            <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} >\n                <label htmlFor={props.id}>\n                    {props.label}\n                </label>\n                {element}\n                {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n            </div>\n            );\n};\n\nexport default Input;\n","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {value: action.value, isValid: action.isValid}\n                },\n                isValid: formIsValid\n            };\n\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        isValid: initialFormValidity\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({type: VALIDATOR_TYPE_REQUIRE});\n\nexport const VALIDATOR_FILE = () => ({type: VALIDATOR_TYPE_FILE});\n\nexport const VALIDATOR_MINLENGTH = val => ({\n        type: VALIDATOR_TYPE_MINLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MAXLENGTH = val => ({\n        type: VALIDATOR_TYPE_MAXLENGTH,\n        val: val\n    });\n\nexport const VALIDATOR_MIN = val => ({type: VALIDATOR_TYPE_MIN, val: val});\nexport const VALIDATOR_MAX = val => ({type: VALIDATOR_TYPE_MAX, val: val});\nexport const VALIDATOR_EMAIL = () => ({type: VALIDATOR_TYPE_EMAIL});\n\n/**\n * @param {mixed} value\n * @param {Array} validators\n * @returns Boolean\n */\nexport const validate = (value, validators) => {\n    let isValid = true;\n    for (const validator of validators) {\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n            isValid = isValid && value.trim().length > 0;\n        }\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n            isValid = isValid && value.trim().length >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n            isValid = isValid && value.trim().length <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MIN) {\n            isValid = isValid && +value >= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_MAX) {\n            isValid = isValid && +value <= validator.val;\n        }\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n        }\n    }\n    return isValid;\n};\n"],"names":["props","auth","useContext","AuthContext","_useHttpClient","useHttpClient","isLoading","hasError","sendRequest","clearError","_useForm","useForm","title","value","isValid","description","address","image","_useForm2","_slicedToArray","formState","inputHandler","navigate","useNavigate","locationSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","formData","wrap","_context","prev","next","preventDefault","FormData","append","inputs","process","token","t0","console","log","stop","_x","apply","arguments","_jsxs","React","children","_jsx","ErrorModal","error","onClear","className","onSubmit","LoadingSpinner","asOverlay","Input","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","ImageUpload","center","buttonText","Button","disabled","_useState","useState","_useState2","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","setIsValid","imageSelectionRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","onChange","img","imgIsValid","target","files","length","concat","src","alt","onClick","current","click","inputReducer","state","action","_objectSpread","val","validate","isTouched","_useReducer","useReducer","initialValue","initialValid","_useReducer2","inputState","dispatch","changeHandler","touchHandler","placeholder","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","test","err","e","f"],"sourceRoot":""}